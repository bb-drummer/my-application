stages:
  - build-init
  - build-app
  - build-image
  - k8s-setup
  - k8s-deploy
  - k8s-cronjob


##########################
# CACHE CONFIG TEMPLATES #
##########################

.pushcache: &pushcache
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    untracked: true
    paths:
      # remove 'paths' to cache ALL untracked files
      # cache JS dependencies
      - node_modules
      - package-lock.json
      # cache PHP dependencies
      - vendor
      - composer-lock.json
      # cache package/project stuff, non-artifacts
      - dist
      - public
      - ${BUILD_LABEL_TMPFILE}
    policy: push

.pullcache: &pullcache
  extends: .pushcache
  cache:
    policy: pull

.pullpushcache: &pullpushcache
  extends: .pushcache
  cache:
    policy: pull-push


#########################
# ENVIRONMENT TEMPLATES #
#########################

.build-env-template: &build-env-job
  image: bbdrummer/my-application-build-env:latest
  tags:
    - docker-runner

.docker-dind-template: &dind-job
  image: bbdrummer/ci-docker-kubectl:latest
  #image: docker:stable
  services:
    - name: docker:dind
      # Zertifikate nicht verfÃ¼gbar, deshalb Workaround:
      #command: ["--insecure-registry=harbor.bjoernbartels.earth:8013"]
  tags:
    - docker-runner

.k8s-ansible-template: &k8s-job
  image: bbdrummer/ci-kubectl:latest
  tags:
    - docker-runner
  artifacts:
    paths:
      - .k8s/generated

.project-variables: &project-variables
  before_script:
    # get k8s config
    - if [[ ! -z "${KUBECONFIG_DEPLOYUSER}" ]] && [[ ! -z "${KUBECONFIG}" ]] ; then echo "$(echo ${KUBECONFIG_DEPLOYUSER} | base64 -d)" > ${KUBECONFIG} ; fi
    # normalize var values
    - if [[ -z "${PROJECTNAME}" ]] ; then export PROJECTNAME="${CI_PROJECT_NAME}"; fi
    - export PROJECTNAME=$(echo "${PROJECTNAME}" | sed 's/[^[:alnum:]]/-/g;s/^[-]*//;s/[-]*$//' | tr '[:upper:]' '[:lower:]')
    #
    - if [[ -z "${PROJECTNAMESPACE}" ]] ; then export PROJECTNAMESPACE="${CI_PROJECT_NAMESPACE}"; fi
    - export PROJECTNAMESPACE=$(echo "${PROJECTNAMESPACE}" | sed 's/[^[:alnum:]]/-/g;s/^[-]*//;s/[-]*$//' | tr '[:upper:]' '[:lower:]')
    #
    - if [[ "${CI_COMMIT_REF_NAME}" == "master" ]] ; then export RELEASE="latest"; fi
    - if [[ "${CI_COMMIT_REF_NAME}" == "release" ]] ; then export RELEASE="stable"; fi
    - if [[ ! -z "${CI_COMMIT_TAG}" ]] ; then export RELEASE="${CI_COMMIT_TAG}"; fi
    - if [[ -z "${RELEASE}" ]] ; then export RELEASE="${CI_COMMIT_REF_NAME}"; fi
    - export RELEASE=$(echo "${RELEASE}" | sed 's/[^[:alnum:]\.]/-/g;s/^[-]*//;s/[-]*$//' | tr '[:upper:]' '[:lower:]')
    #
    - if [[ "${CI_COMMIT_REF_NAME}" == "master" ]] ; then export ENVLABEL="staging"; fi
    - if [[ "${CI_COMMIT_REF_NAME}" == "release" ]] ; then export ENVLABEL="staging"; fi
    - if [[ ! -z "${CI_COMMIT_TAG}" ]] ; then export ENVLABEL="production"; fi
    - if [[ -z "${ENVLABEL}" ]] ; then export ENVLABEL="development"; fi
    - export ENVLABEL=$(echo "${ENVLABEL}" | sed 's/[^[:alnum:]]/-/g;s/^[-]*//;s/[-]*$//' | tr '[:upper:]' '[:lower:]')
    #
    - if [[ -z "${TEAMLABEL}" ]] ; then export TEAMLABEL="${PROJECTNAME}-team"; fi
    - export TEAMLABEL=$(echo "${TEAMLABEL}" | sed 's/[^[:alnum:]]/-/g;s/^[-]*//;s/[-]*$//' | tr '[:upper:]' '[:lower:]')
    # k8s set/check context
    - if [[ -t "kubectl version" ]] ; then kubectl config current-context; else echo -e "\e[33mNo kubectl available...!"; fi
    - if [[ -t "kubectl version" ]] ; then kubectl version; fi

#################
# PIPELINE JOBS #
#################

k8s-setup:
  <<: [*k8s-job, *pullpushcache, *project-variables]
  stage: k8s-setup
  when: manual
  environment:
    name: $ENVLABEL
  script:
    - export ANSIBLE_CONFIG="./ansible.cfg";
    - ansible-playbook -vvv -l localhost ./.k8s/plays/setup.yml --extra-vars "namespace=${PROJECTNAMESPACE} project=${PROJECTNAME} release=${RELEASE} teamlabel=${TEAMLABEL} app_env=${ENVLABEL} database_root_password=${MYSQL_ROOT_PASSWORD} database_password=${MYSQL_PASSWORD} redis_url=${REDIS_DSN_NOAUTH}" -e "{\"releases\":{\"app\":\"${RELEASE}\"}}" -v
    - if [[ ! -z "$DEBUG" ]] ; then cat .k8s/generated/setup/service-deployment.yml; fi

k8s-deploy:
  <<: [*k8s-job, *pullpushcache, *project-variables]
  stage: k8s-deploy
  when: manual
  environment:
    name: $ENVLABEL
  script:
    - export ANSIBLE_CONFIG="./ansible.cfg";
    - ansible-playbook -l localhost ./.k8s/plays/deploy.yml --extra-vars "namespace=${PROJECTNAMESPACE} project=${PROJECTNAME} release=${RELEASE} teamlabel=${TEAMLABEL} app_env=${ENVLABEL} database_root_password=${MYSQL_ROOT_PASSWORD} database_password=${MYSQL_PASSWORD} redis_url=${REDIS_DSN_NOAUTH}" -e "{\"releases\":{\"app\":\"${RELEASE}\"}}" -vvv
    - if [[ ! -z "$DEBUG" ]] ; then cat .k8s/generated/deploy/service-deployment.yml; fi

k8s-undeploy:
  <<: [*k8s-job, *pullpushcache, *project-variables]
  stage: k8s-deploy
  when: manual
  environment:
    name: $ENVLABEL
  script:
    - export ANSIBLE_CONFIG="./ansible.cfg";
    - ansible-playbook -l localhost ./.k8s/plays/remove-deployment.yml --extra-vars "namespace=${PROJECTNAMESPACE} project=${PROJECTNAME} release=${RELEASE} teamlabel=${TEAMLABEL} app_env=${ENVLABEL} database_root_password=${MYSQL_ROOT_PASSWORD} database_password=${MYSQL_PASSWORD} redis_url=${REDIS_DSN_NOAUTH}" -e "{\"releases\":{\"app\":\"${RELEASE}\"}}" -vvv
    - if [[ ! -z "$DEBUG" ]] ; then cat .k8s/generated/remove/remove-deployment.yml; fi

k8s-cleanup:
  <<: [*k8s-job, *pullpushcache, *project-variables]
  stage: k8s-setup
  when: manual
  environment:
    name: $ENVLABEL
  script:
    - export ANSIBLE_CONFIG="./ansible.cfg"
    - ansible-playbook -l localhost ./.k8s/plays/remove.yml --extra-vars "namespace=${PROJECTNAMESPACE} project=${PROJECTNAME} release=${RELEASE} teamlabel=${TEAMLABEL} app_env=${ENVLABEL} database_root_password=${MYSQL_ROOT_PASSWORD} database_password=${MYSQL_PASSWORD} redis_url=${REDIS_DSN_NOAUTH}" --extra-vars "{\"releases\":{\"app\":\"${RELEASE}\"}}" -v
    - if [[ ! -z "$DEBUG" ]] ; then cat .k8s/generated/remove/setup.yml; fi

cronjob-enable:
  <<: [*k8s-job, *project-variables]
  stage: k8s-cronjob
  when: manual
  environment:
    name: $ENVLABEL
  script:
    - export ANSIBLE_CONFIG="./ansible.cfg"
    - ansible-playbook -l localhost ./.k8s/plays/cronjob.yml --extra-vars "namespace=${PROJECTNAMESPACE} project=${PROJECTNAME} release=${RELEASE} teamlabel=${TEAMLABEL} app_env=${ENVLABEL} database_root_password=${MYSQL_ROOT_PASSWORD} database_password=${MYSQL_PASSWORD} redis_url=${REDIS_DSN_NOAUTH} cronjob_enable=true" --extra-vars "{\"releases\":{\"app\":\"${RELEASE}\"}}" -v
    - if [[ ! -z "$DEBUG" ]] ; then cat .k8s/generated/setup/cronjob.yml; fi

cronjob-disable:
  <<: [*k8s-job, *project-variables]
  stage: k8s-cronjob
  when: manual
  environment:
    name: $ENVLABEL
  script:
    - export ANSIBLE_CONFIG="./ansible.cfg"
    - ansible-playbook -l localhost ./.k8s/plays/cronjob.yml --extra-vars "namespace=${PROJECTNAMESPACE} project=${PROJECTNAME} release=${RELEASE} teamlabel=${TEAMLABEL} app_env=${ENVLABEL} database_root_password=${MYSQL_ROOT_PASSWORD} database_password=${MYSQL_PASSWORD} redis_url=${REDIS_DSN_NOAUTH} cronjob_disable=true" --extra-vars "{\"releases\":{\"app\":\"${RELEASE}\"}}" -v
    - if [[ ! -z "$DEBUG" ]] ; then cat .k8s/generated/setup/cronjob.yml; fi

variables:
  BUILD_TARGET: dist
  BUILD_LABEL_TMPFILE: TMP_BUILD_LABEL


init:
  <<: [*build-env-job, *pushcache]
  stage: build-init
  #when: manual
  except:
    variables:
      - $CI_SETUP
  before_script:
    - bin/build-env.sh
    - export BUILD_LABEL=$(TZ=Europe/Berlin date +%Y%m%d.%H%M-$CI_COMMIT_REF_NAME)
  script:
    # save timestamp to file
    - echo $BUILD_LABEL > ${BUILD_LABEL_TMPFILE}
    - echo -e "\n\n\n\e[96mCreated new build label \e[107;30;1m $BUILD_LABEL \e[0m\n\n\n"
    - pwd
    - ls -la
  artifacts:
    paths:
      - ${BUILD_LABEL_TMPFILE}

build-app:
  <<: [*build-env-job, *pullcache, *project-variables]
  stage: build-app
  #when: manual
  except:
    variables:
      - $CI_SETUP
  dependencies:
    - init
  cache: {}
  variables:
    APP_CONFIG: "$APP_LOCAL_CONFIG"
    DB_CONFIG: "$DATABASE_LOCAL_CONFIG"
    BUILD_INFO_FILE: dist/public/build.txt
  script:
    - echo "Target Environment = ${ENVIRONMENT}"
    - echo "Target Hostname    = ${HOST_NAME}"
    - echo "Project Slug       = ${PROJECTSLUG}"
    - echo "Project Hostname   = ${PROJECTHOSTNAME}"
    # build the app/service
    - mkdir dist
    - php -m
    - composer install --no-progress --no-suggest
    # apply application config
    - echo "${APP_CONFIG}" > config/autoload/app.local.php
    - echo "${DB_CONFIG}" > config/autoload/database.local.php
    # assemble distributional files
    - cp -r shell config module public vendor composer* init_autoloader.php dist/
    - cd dist; ln -s public html; cd ..;
    # create build info file
    - echo -e "LABEL=`cat ${BUILD_LABEL_TMPFILE}`" > ${BUILD_INFO_FILE}
    - echo -e "TAG=`git describe --always --tags`" >> ${BUILD_INFO_FILE}
    - echo -e "COMMIT=${CI_COMMIT_SHA}" >> ${BUILD_INFO_FILE}
    - echo -e "PIPELINE=${CI_PIPELINE_ID}" >> ${BUILD_INFO_FILE}
    # print debug-info
    - cat ${BUILD_INFO_FILE}
    - ls -la dist/
  artifacts:
    paths:
      - ${BUILD_TARGET}

docker-release:
  <<: [*dind-job, *pullcache, *project-variables]
  stage: build-image
  only:
    - release
    - tags
  dependencies:
    - build-app
  script:
    - if [[ ! -z "${CI_COMMIT_TAG}" ]] ; then export BUILD_LABEL="${CI_COMMIT_TAG}"; fi
    # build docker image and tag with version
    - docker login -u "${CI_DOCKER_USERNAME}" -p "${CI_DOCKER_TOKEN}"
    - docker build --no-cache --build-arg ARTIFACT_DIR=${BUILD_TARGET} -t bbdrummer/${PROJECTNAME}:${RELEASE} .
    - docker push bbdrummer/${PROJECTNAME}:${RELEASE}
    - if [[ ! -z "${CI_COMMIT_TAG}" ]] ; then docker image tag bbdrummer/${PROJECTNAME}:${RELEASE} bbdrummer/${PROJECTNAME}:latest ; fi
    - if [[ ! -z "${CI_COMMIT_TAG}" ]] ; then docker push bbdrummer/${PROJECTNAME}:latest ; fi

docker-manual:
  <<: [*dind-job, *pullcache, *project-variables]
  stage: build-image
  when: manual
  only:
    - master
  dependencies:
    - build-app
  script:
    - if [[ ! -z "${CI_COMMIT_TAG}" ]] ; then export BUILD_LABEL="${CI_COMMIT_TAG}"; fi
    # build docker image and tag with version
    - docker login -u "${CI_DOCKER_USERNAME}" -p "${CI_DOCKER_TOKEN}"
    - docker build --no-cache --build-arg ARTIFACT_DIR=${BUILD_TARGET} -t bbdrummer/${PROJECTNAME}:${RELEASE} .
    - docker push bbdrummer/${PROJECTNAME}:${RELEASE}


docker-dev:
  <<: [*dind-job, *pullcache, *project-variables]
  stage: build-image
  except:
    variables:
      - $CI_SETUP
    refs:
      - master
      - release
      - tags
  dependencies:
    - build-app
  script:
    # build docker feature image
    - docker login -u "${CI_DOCKER_USERNAME}" -p "${CI_DOCKER_TOKEN}"
    - docker build --no-cache --build-arg ARTIFACT_DIR=${BUILD_TARGET} -t bbdrummer/${PROJECTNAME}:${RELEASE} .
    - docker push bbdrummer/${PROJECTNAME}:${RELEASE}
