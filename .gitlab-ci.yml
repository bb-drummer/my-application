##########################
# VARs:
#   CI_HARBOR_USERNAME
#   CI_HARBOR_PASSWORD
#   KUBECONFIG : path to .kube.config file
#
#   PROJECTSLUG
#   PROJECTNAMESPACE
#   HOST_(DEV,STAGIN,HOTFIX,PROD)
#
##########################

stages:
  - project
  - setup
  - build
  - package
  - deploy
  - ssl-tls
  - cleanup


##########################
# CACHE CONFIG TEMPLATES #
##########################

.pushcache: &pushcache
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    untracked: true
    paths:
      # remove 'paths' to cache ALL untracked files
      # cache JS dependencies
      - node_modules
      - bower_components
      - package-lock.json
      - yarn.lock
      # cache PHP dependencies
      - vendor
      - composer.lock
      # cache package/project stuff, non-artifacts
      - dist
      - public
      - ${BUILD_LABEL_TMPFILE}
    policy: push



.pullcache: &pullcache
  extends: .pushcache
  cache:
    policy: pull



.pullpushcache: &pullpushcache
  extends: .pushcache
  cache:
    policy: pull-push


#########################
# ENVIRONMENT TEMPLATES #
#########################

.build-env-template: &build-env-job
  #image: bbdrummer/ubuntu-apache-php:7.3
  image: harbor.bjoernbartels.earth:8013/my-application/my-application-build-env:latest
  tags:
    - docker-runner

.docker-dind-template: &dind-job
  image: harbor.bjoernbartels.earth:8013/devops/ci-docker-kubectl:latest
  services:
    - name: docker:dind
      # Zertifikate nicht verf√ºgbar, deshalb Workaround:
      command: ["--insecure-registry=harbor.bjoernbartels.earth:8013"]
  tags:
    - docker-runner


########################
# DEPLOYMENT TEMPLATES #
########################

.dev-deploy-template: &deploy-dev
  stage: deploy
  dependencies:
    - init
  environment:
    name: dev
    url: http://${HOST_DEV}
  script:
    # get k8s master-host's https/tls certificates, uses: $KUBEKONFIG, $CI_PROJECT_DIR
    #- .ops/k8s-certs.sh
    - export ENVIRONMENT=dev
    - export PROJECTHOSTNAME=${HOST_DEV}
    # replacements
    - .ops/replacements.sh .ops/config/kubernetes/svc-app.yaml
    # run kubernetes deployment
    # delete existing harbor login secret (if exists)
    - kubectl delete secret ${PROJECTSLUG}-harbor-login --ignore-not-found -n ${PROJECTNAMESPACE}
    # add new login secret
    - kubectl create secret docker-registry ${PROJECTSLUG}-harbor-login --docker-username=$CI_HARBOR_USERNAME --docker-password=$CI_HARBOR_PASSWORD --docker-server=harbor.bjoernbartels.earth:8013 --docker-email=gitlab-pipeline@bjoernbartels.earth -n ${PROJECTNAMESPACE}
    # apply configuration
    - kubectl apply -n ${PROJECTNAMESPACE} -f .ops/config/kubernetes/svc-app.yaml
    # rollout image
    - kubectl rollout status -n ${PROJECTNAMESPACE} -w deployment/${PROJECTSLUG}-${ENVIRONMENT}


.staging-deploy-template: &deploy-staging
  stage: deploy
  dependencies:
    - init
  environment:
    name: integ
    url: http://${HOST_STAGING}
  script:
    # get k8s master-host's https/tls certificates, uses: $KUBEKONFIG, $CI_PROJECT_DIR
    #- .ops/k8s-certs.sh
    - export ENVIRONMENT=staging
    - export PROJECTHOSTNAME=${HOST_STAGING}
    # replacements
    - .ops/replacements.sh .ops/config/kubernetes/svc-app.yaml
    # run kubernetes deployment
    # delete existing harbor login secret (if exists)
    - kubectl delete secret ${PROJECTSLUG}-harbor-login --ignore-not-found -n ${PROJECTNAMESPACE}
    # add new login secret
    - kubectl create secret docker-registry ${PROJECTSLUG}-harbor-login --docker-username=$CI_HARBOR_USERNAME --docker-password=$CI_HARBOR_PASSWORD --docker-server=harbor.bjoernbartels.earth:8013 --docker-email=gitlab-pipeline@bjoernbartels.earth -n ${PROJECTNAMESPACE}
    # apply configuration
    - kubectl apply -n ${PROJECTNAMESPACE} -f .ops/config/kubernetes/svc-app.yaml
    # rollout image
    - kubectl rollout status -n ${PROJECTNAMESPACE} -w deployment/${PROJECTSLUG}-${ENVIRONMENT}


.hotfix-deploy-template: &deploy-hotfix
  stage: deploy
  dependencies:
    - init
  environment:
    name: hotfix
    url: http://${HOST_HOTFIX}
  script:
    # get k8s master-host's https/tls certificates, uses: $KUBEKONFIG, $CI_PROJECT_DIR
    #- .ops/k8s-certs.sh
    - export ENVIRONMENT=hotfix
    - export PROJECTHOSTNAME=${HOST_HOTFIX}
    # replacements
    - .ops/replacements.sh .ops/config/kubernetes/svc-app.yaml
    # run kubernetes deployment
    # delete existing harbor login secret (if exists)
    - kubectl delete secret ${PROJECTSLUG}-harbor-login --ignore-not-found -n ${PROJECTNAMESPACE}
    # add new login secret
    - kubectl create secret docker-registry ${PROJECTSLUG}-harbor-login --docker-username=$CI_HARBOR_USERNAME --docker-password=$CI_HARBOR_PASSWORD --docker-server=harbor.bjoernbartels.earth:8013 --docker-email=gitlab-pipeline@bjoernbartels.earth -n ${PROJECTNAMESPACE}
    # apply configuration
    - kubectl apply -n ${PROJECTNAMESPACE} -f .ops/config/kubernetes/svc-app.yaml
    # rollout image
    - kubectl rollout status -n ${PROJECTNAMESPACE} -w deployment/${PROJECTSLUG}-${ENVIRONMENT}


.prod-deploy-template: &deploy-prod
  stage: deploy
  dependencies:
    - init
  environment:
    name: production
    url: http://my-application.bjoernbartels.earth
  script:
    # get k8s master-host's https/tls certificates, uses: $KUBEKONFIG, $CI_PROJECT_DIR
    #- .ops/k8s-certs.sh
    - export ENVIRONMENT=production
    - export PROJECTHOSTNAME=${HOST_PROD}
    # replacements
    - .ops/replacements.sh .ops/config/kubernetes/svc-app.yaml
    # run kubernetes deployment
    # delete existing harbor login secret (if exists)
    - kubectl delete secret ${PROJECTSLUG}-harbor-login --ignore-not-found -n ${PROJECTNAMESPACE}
    # add new login secret
    - kubectl create secret docker-registry ${PROJECTSLUG}-harbor-login --docker-username=$CI_HARBOR_USERNAME --docker-password=$CI_HARBOR_PASSWORD --docker-server=harbor.bjoernbartels.earth:8013 --docker-email=gitlab-pipeline@bjoernbartels.earth -n ${PROJECTNAMESPACE}
    # apply configuration
    - kubectl apply -n ${PROJECTNAMESPACE} -f .ops/config/kubernetes/svc-app.yaml
    # rollout image
    - kubectl rollout status -n ${PROJECTNAMESPACE} -w deployment/${PROJECTSLUG}-${ENVIRONMENT}


#################
# PIPELINE JOBS #
#################

variables:
  BUILD_TARGET: dist
  BUILD_LABEL_TMPFILE: TMP_BUILD_LABEL

before_script:
  - if [ -f ${BUILD_LABEL_TMPFILE} ]; then export BUILD_LABEL=`cat ${BUILD_LABEL_TMPFILE}`; fi
  # get k8s master-host's https/tls certificates, uses: $KUBEKONFIG, $CI_PROJECT_DIR
  - export ENVIRONMENT=dev; if [ "$CI_COMMIT_REF_SLUG" = "master" ]; then export ENVIRONMENT=staging; fi; if [ "$CI_COMMIT_REF_SLUG" = "release" ]; then export ENVIRONMENT=production; fi; if [ ! -z "$CI_COMMIT_TAG" ]; then export ENVIRONMENT=production; fi;


##################
# K8S SETUP JOBS #
##################

k82-namespace:
  <<: [*dind-job]
  stage: project
  when: manual
  only:
    variables:
      - $CI_SETUP
  except:
    - release
    - tags
  script:
    - echo "Current Environment= ${ENVIRONMENT}"
    - pwd
    #
    - export PROJECTHOSTNAME=${CI_COMMIT_REF_SLUG}-${HOST_DEV}
    - export PROJECTSLUG=${PROJECTSLUG}-${CI_COMMIT_REF_SLUG}
    # replacements
    - .ops/replacements.sh .ops/config/kubernetes/namespace.yaml
    #
    # create namespace in cluster
    - kubectl apply -n ${PROJECTNAMESPACE} -f .ops/config/kubernetes/namespace.yaml


storage-app:
  <<: [*dind-job, *pullcache]
  stage: project
  when: manual
  script:
    - pwd
    #
    - export PROJECTHOSTNAME=${CI_COMMIT_REF_SLUG}-${HOST_DEV}
    - export PROJECTSLUG=${PROJECTSLUG}-${CI_COMMIT_REF_SLUG}
    # replacements
    - .ops/replacements.sh .ops/config/kubernetes/storage-app.yaml
    #
    # deploy mysql service
    - kubectl apply -n ${PROJECTNAMESPACE} -f .ops/config/kubernetes/storage-app.yaml


storage-mysql:
  <<: [*dind-job, *pullcache]
  stage: project
  when: manual
  script:
    - pwd
    #
    - export PROJECTHOSTNAME=${CI_COMMIT_REF_SLUG}-${HOST_DEV}
    - export PROJECTSLUG=${PROJECTSLUG}-${CI_COMMIT_REF_SLUG}
    # replacements
    - .ops/replacements.sh .ops/config/kubernetes/storage-mysql.yaml
    #
    # deploy mysql service
    - kubectl apply -n ${PROJECTNAMESPACE} -f .ops/config/kubernetes/storage-mysql.yaml


ingress:
  <<: [*dind-job, *pullcache]
  stage: project
  when: manual
  only:
    variables:
      - $CI_SETUP
  script:
    - pwd
    #
    - export PROJECTHOSTNAME=${CI_COMMIT_REF_SLUG}-${HOST_DEV}
    - export PROJECTSLUG=${PROJECTSLUG}-${CI_COMMIT_REF_SLUG}
    # replacements
    - .ops/replacements.sh .ops/config/kubernetes/ingress.yaml
    #
    # deploy non-SSL/TLS ingress
    - kubectl apply -n ${PROJECTNAMESPACE} -f .ops/config/kubernetes/ingress.yaml


ingress-ssl-tls:
  <<: [*dind-job, *pullcache]
  stage: project
  when: manual
  only:
    variables:
      - $CI_SETUP
  script:
    - pwd
    #
    - export PROJECTHOSTNAME=${CI_COMMIT_REF_SLUG}-${HOST_DEV}
    - export PROJECTSLUG=${PROJECTSLUG}-${CI_COMMIT_REF_SLUG}
    # replacements
    - .ops/replacements.sh .ops/config/kubernetes/ingress-ssl-tls.yaml
    - .ops/replacements.sh .ops/config/kubernetes/ssl-tls-certificate-letsencrypt-prod.yaml
    - .ops/replacements.sh .ops/config/kubernetes/ssl-tls-issuer-letsencrypt-prod.yaml
    #
    # deploy ingress with SSL/TLS (via letsencrypt)
    - kubectl apply -n ${PROJECTNAMESPACE} -f .ops/config/kubernetes/ingress-ssl-tls.yaml -f .ops/config/kubernetes/ssl-tls-certificate-letsencrypt-prod.yaml -f .ops/config/kubernetes/ssl-tls-issuer-letsencrypt-prod.yaml


service-mysql:
  <<: [*dind-job, *pullcache]
  stage: project
  when: manual
  script:
    - pwd
    #
    - export PROJECTHOSTNAME=${CI_COMMIT_REF_SLUG}-${HOST_DEV}
    - export PROJECTSLUG=${PROJECTSLUG}-${CI_COMMIT_REF_SLUG}
    # replacements
    - .ops/replacements.sh .ops/config/kubernetes/svc-mysql.yaml
    #
    # deploy mysql service
    - kubectl apply -n ${PROJECTNAMESPACE} -f .ops/config/kubernetes/svc-mysql.yaml
    # rollout image
    - kubectl rollout status -n ${PROJECTNAMESPACE} -w deployment/${PROJECTSLUG}-${ENVIRONMENT}-mysql


service-phpmyadmin:
  <<: [*dind-job, *pullcache]
  stage: project
  when: manual
  script:
    - pwd
    #
    - export PROJECTHOSTNAME=${CI_COMMIT_REF_SLUG}-${HOST_DEV}
    - export PROJECTSLUG=${PROJECTSLUG}-${CI_COMMIT_REF_SLUG}
    # replacements
    - .ops/replacements.sh .ops/config/kubernetes/svc-pma.yaml
    #
    # deploy phpMyAdmin service
    - kubectl apply -n ${PROJECTNAMESPACE} -f .ops/config/kubernetes/svc-pma.yaml
    # rollout image
    - kubectl rollout status -n ${PROJECTNAMESPACE} -w deployment/${PROJECTSLUG}-${ENVIRONMENT}-admin-pma


service-redis:
  <<: [*dind-job, *pullcache]
  stage: project
  when: manual
  script:
    - pwd
    #
    - export PROJECTHOSTNAME=${CI_COMMIT_REF_SLUG}-${HOST_DEV}
    - export PROJECTSLUG=${PROJECTSLUG}-${CI_COMMIT_REF_SLUG}
    # replacements
    - .ops/replacements.sh .ops/config/kubernetes/svc-redis.yaml
    #
    # deploy redis service
    - kubectl apply -n ${PROJECTNAMESPACE} -f .ops/config/kubernetes/svc-redis.yaml
    # rollout image
    - kubectl rollout status -n ${PROJECTNAMESPACE} -w deployment/${PROJECTSLUG}-${ENVIRONMENT}-redis-master

##############
# BUILD JOBS #
##############

init:
  <<: [*build-env-job, *pushcache]
  stage: setup
  except:
    variables:
      - $CI_SETUP
  before_script:
    - .ops/build-env.sh
    - export BUILD_LABEL=$(TZ=Europe/Berlin date +%Y%m%d.%H%M-$CI_COMMIT_REF_NAME)
  script:
    # save timestamp to file
    - echo $BUILD_LABEL > ${BUILD_LABEL_TMPFILE}
    - echo -e "\n\n\n\e[96mCreated new build label \e[107;30;1m $BUILD_LABEL \e[0m\n\n\n"
    - pwd
    - ls -la
  artifacts:
    paths:
      - ${BUILD_LABEL_TMPFILE}

build-app:
  <<: [*build-env-job, *pullcache]
  stage: build
  except:
    variables:
      - $CI_SETUP
  dependencies:
    - init
  cache: {}
  variables:
    APP_CONFIG: "$APP_LOCAL_CONFIG"
    DB_CONFIG: "$DATABASE_LOCAL_CONFIG"
    BUILD_INFO_FILE: dist/public/build.txt
  script:
    # build resources
    #- .ops/build-env.sh
    # build the app/service
    - mkdir dist
    - php -m
    - composer install --no-progress --no-suggest
    # apply application config
    - echo "${APP_CONFIG}" > config/autoload/app.local.php
    - echo "${DB_CONFIG}" > config/autoload/database.local.php
    # assemble distributional files
    - cp -r shell config module public vendor composer* init_autoloader.php dist/
    - cd dist; ln -s public html; cd ..;
    # create build info file
    - echo -e "LABEL=`cat ${BUILD_LABEL_TMPFILE}`" > ${BUILD_INFO_FILE}
    - echo -e "TAG=`git describe --always --tags`" >> ${BUILD_INFO_FILE}
    - echo -e "COMMIT=${CI_COMMIT_SHA}" >> ${BUILD_INFO_FILE}
    - echo -e "PIPELINE=${CI_PIPELINE_ID}" >> ${BUILD_INFO_FILE}
    # print debug-info
    - cat ${BUILD_INFO_FILE}
    - ls -la dist/
  artifacts:
    paths:
      - ${BUILD_TARGET}


docker:
  <<: [*dind-job, *pullcache]
  stage: package
  except:
    variables:
      - $CI_SETUP
  when: manual
  only:
    - master
    - tags
    - release
  dependencies:
    - init
    - build-app
  script:
    - ls -la dist/
    #
    #- .ops/k8s-certs.sh
    - export ENVIRONMENT=dev
    - export PROJECTHOSTNAME=${CI_COMMIT_REF_SLUG}-${HOST_DEV}
    - export PROJECTSLUG=${PROJECTSLUG}-${CI_COMMIT_REF_SLUG}
    #
    - docker login harbor.bjoernbartels.earth:8013 -u "${CI_HARBOR_USERNAME}" -p "${CI_HARBOR_PASSWORD}"
    # build docker image and tag with version
    - docker build --no-cache --build-arg ARTIFACT_DIR=${BUILD_TARGET} -t harbor.bjoernbartels.earth:8013/${PROJECTNAMESPACE}/${PROJECTSLUG}-distributional:${CI_COMMIT_REF_NAME} .
    - docker push harbor.bjoernbartels.earth:8013/${PROJECTNAMESPACE}/${PROJECTSLUG}-distributional:${CI_COMMIT_REF_NAME}


###############
# DEPLOY JOBS #
###############

DEV-deploy:
  <<: [*dind-job, *pullcache]
  stage: deploy
  #when: manual
  #only:
  #  kubernetes: active
  except:
    refs:
      - develop
      - master
      - release
      - tags
    variables:
      - $CI_SETUP
  dependencies:
    - init
    - build-app
  environment:
    name: dev
    url: http://${CI_COMMIT_REF_SLUG}-${HOST_DEV}
  script:
    - ls -la dist/
    #
    - export ENVIRONMENT=dev
    - export PROJECTHOSTNAME=${CI_COMMIT_REF_SLUG}-${HOST_DEV}
    - export PROJECTSLUG=${PROJECTSLUG}-${CI_COMMIT_REF_SLUG}
    # combine docker & deploy step: build docker feature image and deploy on kubernetes
    - docker login harbor.bjoernbartels.earth:8013 -u "${CI_HARBOR_USERNAME}" -p "${CI_HARBOR_PASSWORD}"
    - docker build --no-cache --build-arg ARTIFACT_DIR=${BUILD_TARGET} -t harbor.bjoernbartels.earth:8013/${PROJECTNAMESPACE}/${PROJECTSLUG}-distributional:${CI_COMMIT_REF_NAME} .
    - docker push harbor.bjoernbartels.earth:8013/${PROJECTNAMESPACE}/${PROJECTSLUG}-distributional:${CI_COMMIT_REF_NAME}
    #
    # replacements
    - .ops/replacements.sh .ops/config/kubernetes/svc-app.yaml
    #
    # k8s deployments
    - kubectl apply -n ${PROJECTNAMESPACE} -f .ops/config/kubernetes/svc-app.yaml
    # k8s rollout status
    - kubectl rollout status -n ${PROJECTNAMESPACE} -w deployment/${PROJECTSLUG}-${ENVIRONMENT}



DEV-manual:
  <<: [ *dind-job, *deploy-dev, *pullcache ]
  when: manual
  only:
    #kubernetes: active
    refs:
      - master
      - tags
      - release
  except:
    variables:
      - $CI_SETUP

STAGING-auto:
  <<: [ *dind-job, *deploy-staging, *pullcache ]
  only:
    #kubernetes: active
    refs:
      - master
  except:
    variables:
      - $CI_SETUP

STAGING-manual:
  <<: [ *dind-job, *deploy-staging, *pullcache ]
  only:
    #kubernetes: active
    refs:
      - tags
      - release
  except:
    variables:
      - $CI_SETUP
  when: manual

HOTFIX-manual:
  <<: [ *dind-job, *deploy-hotfix, *pullcache ]
  only:
    #kubernetes: active
    refs:
      - tags
      - release
  except:
    variables:
      - $CI_SETUP
  when: manual

PRODUCTION-manual:
  <<: [ *dind-job, *deploy-prod, *pullcache ]
  only:
    #kubernetes: active
    refs:
      - tags
      - release
  when: manual


SSL-TLS-activate:
  <<: [*dind-job, *pullcache]
  stage: ssl-tls
  when: manual
  except:
    refs:
      - develop
      - master
      - release
      - tags
    variables:
      - $CI_SETUP
  script:
    - export ENVIRONMENT=dev
    - export PROJECTHOSTNAME=${CI_COMMIT_REF_SLUG}-${HOST_DEV}
    - export PROJECTSLUG=${PROJECTSLUG}-${CI_COMMIT_REF_SLUG}
    # replacements
    - .ops/replacements.sh .ops/config/kubernetes/ingress.yaml
    - .ops/replacements.sh .ops/config/kubernetes/ingress-ssl-tls.yaml
    - .ops/replacements.sh .ops/config/kubernetes/ssl-tls-certificate-letsencrypt-prod.yaml
    - .ops/replacements.sh .ops/config/kubernetes/ssl-tls-issuer-letsencrypt-prod.yaml
    #
    # delete k8s deployments
    - kubectl delete --ignore-not-found -n ${PROJECTNAMESPACE} -f .ops/config/kubernetes/ingress.yaml
    - kubectl apply -n ${PROJECTNAMESPACE} -f .ops/config/kubernetes/ingress-ssl-tls.yaml -f .ops/config/kubernetes/ssl-tls-certificate-letsencrypt-prod.yaml -f .ops/config/kubernetes/ssl-tls-issuer-letsencrypt-prod.yaml


SSL-TLS-deactivate:
  <<: [*dind-job, *pullcache]
  stage: ssl-tls
  when: manual
  except:
    refs:
      - develop
      - master
      - release
      - tags
    variables:
      - $CI_SETUP
  script:
    - export ENVIRONMENT=dev
    - export PROJECTHOSTNAME=${CI_COMMIT_REF_SLUG}-${HOST_DEV}
    - export PROJECTSLUG=${PROJECTSLUG}-${CI_COMMIT_REF_SLUG}
    # replacements
    - .ops/replacements.sh .ops/config/kubernetes/ingress.yaml
    - .ops/replacements.sh .ops/config/kubernetes/ingress-ssl-tls.yaml
    - .ops/replacements.sh .ops/config/kubernetes/ssl-tls-certificate-letsencrypt-prod.yaml
    - .ops/replacements.sh .ops/config/kubernetes/ssl-tls-issuer-letsencrypt-prod.yaml
    #
    # delete k8s deployments
    - kubectl delete --ignore-not-found -n ${PROJECTNAMESPACE} -f .ops/config/kubernetes/ingress-ssl-tls.yaml -f .ops/config/kubernetes/ssl-tls-certificate-letsencrypt-prod.yaml -f .ops/config/kubernetes/ssl-tls-issuer-letsencrypt-prod.yaml
    - kubectl apply -n ${PROJECTNAMESPACE} -f .ops/config/kubernetes/ingress.yaml


DEV-cleanup:
  <<: [*dind-job, *pullcache]
  stage: cleanup
  when: manual
  #only:
  #  kubernetes: active
  except:
    - develop
    - master
    - release
    - tags
  dependencies:
    - DEV-deploy
  environment:
    name: dev
    url: http://${CI_COMMIT_REF_SLUG}-${HOST_DEV}
  script:
    - export ENVIRONMENT=dev
    - export PROJECTHOSTNAME=${CI_COMMIT_REF_SLUG}-${HOST_DEV}
    - export PROJECTSLUG=${PROJECTSLUG}-${CI_COMMIT_REF_SLUG}
    # replacements
    - .ops/replacements.sh .ops/config/kubernetes/ingress.yaml
    - .ops/replacements.sh .ops/config/kubernetes/ingress-ssl-tls.yaml
    - .ops/replacements.sh .ops/config/kubernetes/ssl-tls-certificate-letsencrypt-prod.yaml
    - .ops/replacements.sh .ops/config/kubernetes/ssl-tls-issuer-letsencrypt-prod.yaml
    - .ops/replacements.sh .ops/config/kubernetes/svc-app.yaml
    - .ops/replacements.sh .ops/config/kubernetes/svc-pma.yaml
    - .ops/replacements.sh .ops/config/kubernetes/svc-mysql.yaml
    - .ops/replacements.sh .ops/config/kubernetes/svc-redis.yaml
    - .ops/replacements.sh .ops/config/kubernetes/storage-app.yaml
    - .ops/replacements.sh .ops/config/kubernetes/storage-mysql.yaml
    #
    # delete k8s deployments
    - kubectl delete --ignore-not-found -n ${PROJECTNAMESPACE} -f .ops/config/kubernetes/ingress-ssl-tls.yaml -f .ops/config/kubernetes/ssl-tls-certificate-letsencrypt-prod.yaml -f .ops/config/kubernetes/ssl-tls-issuer-letsencrypt-prod.yaml
    - kubectl delete --ignore-not-found -n ${PROJECTNAMESPACE} -f .ops/config/kubernetes/ingress.yaml
    - kubectl delete --ignore-not-found -n ${PROJECTNAMESPACE} -f .ops/config/kubernetes/svc-app.yaml -f .ops/config/kubernetes/svc-pma.yaml -f .ops/config/kubernetes/svc-mysql.yaml -f .ops/config/kubernetes/svc-redis.yaml
    - kubectl delete --ignore-not-found -n ${PROJECTNAMESPACE} -f .ops/config/kubernetes/storage-app.yaml -f .ops/config/kubernetes/storage-mysql.yaml
